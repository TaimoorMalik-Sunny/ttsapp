generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]
}

model Customer {
  id          String   @id @default(cuid())
  phoneNumber String   @unique
  name        String
  cnic        String   @unique
  other       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  transactions Transaction[]
}

model Transaction {
  id              String   @id @default(cuid())
  customerPhone   String
  customerName    String
  customerCnic    String
  sendingAmount   Float
  receivingAmount Float
  timestamp       DateTime @default(now())
  userId          String
  userEmail       String
  receiverInfo    String?
  operator        String?  // jazzcash, easypaisa, banks
  type            String   // own_wallet, other_wallet, bank_account
  
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  customer Customer @relation(fields: [customerPhone], references: [phoneNumber], onDelete: Cascade)
  
  @@map("daily_transactions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
